		           +--------------------------+
       	                   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

Blake Koblitz
Tyler Hutchison
Nick George

---- PRELIMINARIES ----

Viewed http://stackoverflow.com/questions/12147956/system-call-implementation-in-pintos
Viewed https://github.com/ChrisKXu as reference.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

None, just code changes.

---- ALGORITHMS ----

So, we need to first figure out the filename, then find all of the arguments.
This is done using strtok_r. But before we can do that we need to allocate 
enough memory for the entire string being passed in (arguments as well as the
filename). Once that is done and verified, we then get the name and arguments,
copy them into the stack memory, reversed, and then attempt to call the user
program into a new thread. We avoid getting overflow on the page by simply
only allowing a certain number of characters in the argument.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
strtok_r will store the save_ptr but the strtok method will not.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

- Avoid giving kernel extra work.
- Protecting the kernel from inputs which may give kernel bad data.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static void syscall_handler (struct intr_frame *);

static void copy_in (void *, const void *, size_t);



static struct file *find_file_by_fd (int fd);

static struct fd_elem *find_fd_elem_by_fd (int fd);


struct fd_elem
{
  int fd;
  struct file *file;
  struct list_elem elem;
  struct list_elem thread_elem;
};

static struct lock fs_lock;

static struct list file_list;

static void
syscall_handler (struct intr_frame *f UNUSED)
{
typedef int syscall_function (int, int, int);

  
  struct syscall 
    {
      size_t arg_cnt;           
      syscall_function *func;   
    };

  static const struct syscall syscall_table[] =
    {
      {0, (syscall_function *) sys_halt},
      {1, (syscall_function *) sys_exit},
      {1, (syscall_function *) sys_exec},
      {1, (syscall_function *) sys_wait},
      {2, (syscall_function *) sys_create},
      {1, (syscall_function *) sys_remove},
      {1, (syscall_function *) sys_open},
      {1, (syscall_function *) sys_filesize},
      {3, (syscall_function *) sys_read},
      {3, (syscall_function *) sys_write},
      {2, (syscall_function *) sys_seek},
      {1, (syscall_function *) sys_tell},
      {1, (syscall_function *) sys_close},
    };

  const struct syscall *sc;
  unsigned calln;
  int args[3];

  /* Get the system call. */
  copy_in (&calln, f->esp, sizeof calln);
  if (calln >= sizeof syscall_table / sizeof *syscall_table)
    thread_exit ();
  sc = syscall_table + calln;

  /* Get the system call arguments. */
  ASSERT (sc->arg_cnt <= sizeof args / sizeof *args);
  memset (args, 0, sizeof args);
  copy_in (args, (uint32_t *) f->esp + 1, sizeof *args * sc->arg_cnt);


  f->eax = sc->func (args[0], args[1], args[2]);
}

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

When a file is opened, the system will generate the next value of the descriptor and push it onto fd_list within the thread.

The file descriptors are unique throughout the system.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

First we must validate that what we are receiving is correct.
Next we must get the system call number, followed by getting the arguments (validate those).
Finally the return values are stored in the EAX register.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

Max inspections would be 1024.
2 bytes of data: only once.
No room for improvement as you must inspect the data of the page.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

We simply call the process_wait(..) method of the given child, which
returns the result code from that method.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

If the pointer to a file is ever invalid, you should close all the files
that are currently open, remove any of those items from your descriptor list,
and finally make sure all processes are orphaned.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Add a semaphore with initial value at 0.
After the thread_create function, call sema_down.
After it loads the program, even if it fails, the semaphore will release it.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When a process exits, all resources should be released.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Seemed the most logical, but I'm sure it could be more efficient.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

One major advantage is that each process has it's own file descriptor list, 
which makes the organization very nice. But that also comes with some overhead
as it needs to store more information.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

--


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

About right.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

The kernal code is very clean, modularized, and easy to follow. Very simple design.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Worked for me.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

No.
